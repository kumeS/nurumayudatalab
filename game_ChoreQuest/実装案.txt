# 🎮 Chore Quest - 未実装機能の実装案

## 📋 概要
現在のChore Questアプリの実装状況を分析し、未実装の機能について具体的な実装アイディアと優先度をまとめました。

---

## 🚀 優先度別実装ロードマップ

### 🔥 高優先度（Phase 1: 基盤強化）

#### 1. Firebase認証・バックエンド連携

**概要**: 現在のLocalStorage※1ベースのデータ管理をFirebase※2に移行し、真のマルチユーザー対応とリアルタイム同期を実現する

**なぜ必要か**:
- 現在は単一端末でのみデータが保存され、家族間での協力プレイが実現できない
- ブラウザのデータクリアでゲーム進行が失われるリスクがある
- 複数端末（スマホ・PC・タブレット）での同一アカウント利用ができない
- 家族メンバー間でのリアルタイムなボス戦協力やランキング競争が不可能

**現状**: LocalStorage※1のみでデータ管理
**実装案**:
```javascript
// Firebase※2設定
import { initializeApp } from 'firebase/app';
import { getAuth, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';
import { getFirestore, doc, setDoc, onSnapshot } from 'firebase/firestore';

// 認証機能の追加
function initFirebaseAuth() {
    const provider = new GoogleAuthProvider();
    const auth = getAuth();
    
    // ログインボタンの処理を変更
    signInWithPopup(auth, provider)
        .then((result) => {
            const user = result.user;
            gameState.user.uid = user.uid;
            gameState.user.email = user.email;
            syncUserDataToFirestore();
        });
}

// Firestore※8との同期
function syncUserDataToFirestore() {
    const db = getFirestore();
    const userRef = doc(db, 'users', gameState.user.uid);
    
    // データ保存
    setDoc(userRef, gameState.user, { merge: true });
    
    // リアルタイム同期
    onSnapshot(userRef, (doc) => {
        if (doc.exists()) {
            gameState.user = { ...gameState.user, ...doc.data() };
            updateUI();
        }
    });
}
```

**ファイル構成**:
- `js/firebase.js` - Firebase※2設定・認証機能
- `js/sync.js` - データ同期機能

#### 2. PWA対応（オフライン機能）

**概要**: Progressive Web App※3化により、ネイティブアプリ※4のような体験とオフライン機能を提供する

**なぜ必要か**:
- スマートフォンのホーム画面に追加でき、アプリのような使用感を実現
- オフライン時でもクエスト進行やタイマー機能が利用可能
- プッシュ通知でリマインダーやイベント告知が可能
- アプリストア※5を経由せずに配布でき、更新も自動で行われる
- 家事中にネット接続が不安定でも継続してゲームを楽しめる

**現状**: 通常のWebアプリ
**実装案**:
```json
// manifest.json
{
    "name": "Chore Quest",
    "short_name": "ChoreQuest",
    "description": "家事をゲーム化するアプリ",
    "start_url": "/",
    "display": "standalone",
    "background_color": "#667eea",
    "theme_color": "#667eea",
    "icons": [
        {
            "src": "icons/icon-192.png",
            "sizes": "192x192",
            "type": "image/png"
        }
    ]
}
```

```javascript
// service-worker.js
const CACHE_NAME = 'chore-quest-v1';
const urlsToCache = [
    '/',
    '/index.html',
    '/js/app.js',
    '/js/gameState.js',
    // 他のJSファイル
];

self.addEventListener('install', (event) => {
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then((cache) => cache.addAll(urlsToCache))
    );
});

// オフライン時のフォールバック
self.addEventListener('fetch', (event) => {
    event.respondWith(
        caches.match(event.request)
            .then((response) => response || fetch(event.request))
    );
});
```

#### 3. リアルタイム家族協力機能

**概要**: 家族メンバー間でボス戦の進行状況やダメージをリアルタイムで同期し、真の協力プレイを実現する

**なぜ必要か**:
- 現在のボス戦は個人の画面内でのみ完結し、家族の協力感が薄い
- 他の家族メンバーの貢献度や進捗が見えず、モチベーション維持が困難
- 家族全員でひとつの目標に向かう一体感を演出できない
- リアルタイム更新により、家事完了の瞬間を家族で共有できる
- 競争要素と協力要素のバランスで、家族の絆を深められる

**現状**: 静的なボス戦データ
**実装案**:
```javascript
// js/familySync.js
function initFamilyBossSync() {
    const db = getFirestore();
    const bossRef = doc(db, 'familyBosses', gameState.user.familyId);
    
    // ボス状態のリアルタイム同期
    onSnapshot(bossRef, (doc) => {
        if (doc.exists()) {
            bossState = { ...bossState, ...doc.data() };
            updateBossUI();
            
            // 他の家族メンバーの参加状況を更新
            renderFamilyParticipants();
        }
    });
}

function dealBossDamageSync(damage) {
    const db = getFirestore();
    const bossRef = doc(db, 'familyBosses', gameState.user.familyId);
    
    // Firestore※8でアトミックな更新※9
    updateDoc(bossRef, {
        currentHP: increment(-damage),
        [`participants.${gameState.user.uid}.damage`]: increment(damage),
        [`participants.${gameState.user.uid}.name`]: gameState.user.nickname,
        [`participants.${gameState.user.uid}.avatar`]: gameState.user.avatar,
        lastUpdated: serverTimestamp()
    });
}
```

### ⭐ 中優先度（Phase 2: ゲーム要素拡張）

#### 4. アイテム・装備システム

**概要**: RPG要素を強化し、獲得したコインでアイテムを購入・装備してキャラクターを強化できるシステム

**なぜ必要か**:
- 現在はコインを獲得しても使い道がなく、達成感が持続しない
- キャラクターの成長要素が乏しく、長期的なモチベーション維持が困難
- 装備による能力向上で、より効率的な家事進行が可能になる
- コレクション要素により、継続的なプレイ動機を提供
- 家族間での装備自慢や情報交換でコミュニケーションが活性化

**実装案**:
```javascript
// js/inventory.js
const itemDatabase = [
    {
        id: 'sword_cleaning',
        name: '光る皿洗いソード',
        type: 'weapon',
        effect: { xpBonus: 0.2, staminaReduction: 0.1 },
        price: 500,
        rarity: 'rare',
        icon: '⚔️'
    },
    {
        id: 'armor_apron',
        name: '魔法のエプロン',
        type: 'armor',
        effect: { staminaReduction: 0.15 },
        price: 300,
        rarity: 'common',
        icon: '🦺'
    }
];

function equipItem(itemId) {
    const item = itemDatabase.find(i => i.id === itemId);
    if (!item || !gameState.user.inventory.includes(itemId)) return;
    
    // 装備スロットに設定
    gameState.user.equipment[item.type] = itemId;
    
    // 効果を適用
    recalculateStats();
    updateUI();
    saveGameState();
}

function recalculateStats() {
    // 基本ステータス
    let xpMultiplier = 1.0;
    let staminaMultiplier = 1.0;
    
    // 装備効果を適用
    Object.values(gameState.user.equipment).forEach(itemId => {
        const item = itemDatabase.find(i => i.id === itemId);
        if (item && item.effect) {
            xpMultiplier += item.effect.xpBonus || 0;
            staminaMultiplier -= item.effect.staminaReduction || 0;
        }
    });
    
    gameState.user.modifiers = { xpMultiplier, staminaMultiplier };
}
```

#### 5. ペット育成システム

**概要**: 仮想ペットを育成し、クエスト完了で経験値を与えて進化させる愛着形成システム

**なぜ必要か**:
- キャラクター以外の成長要素を追加し、ゲームの奥深さを向上
- ペットへの愛着により、継続的なプレイ動機を強化
- 進化演出により、達成感と驚きの体験を提供
- 家族それぞれが異なるペットを育成し、個性を表現
- ペットのボーナス効果で戦略的な要素を追加

**実装案**:
```javascript
// js/pets.js
const petDatabase = [
    {
        id: 'cleaning_cat',
        name: 'お掃除ニャンコ',
        stages: [
            { level: 1, name: '子猫', icon: '🐱', effect: { staminaRegen: 1 } },
            { level: 10, name: '成猫', icon: '🐈', effect: { staminaRegen: 2, xpBonus: 0.1 } },
            { level: 25, name: '魔法猫', icon: '🦄', effect: { staminaRegen: 3, xpBonus: 0.2, coinBonus: 0.1 } }
        ]
    }
];

function feedPet(petId, xpAmount) {
    const pet = gameState.user.pets.find(p => p.id === petId);
    if (!pet) return;
    
    pet.xp += xpAmount;
    
    // 進化チェック
    const petData = petDatabase.find(p => p.id === petId);
    const nextStage = petData.stages.find(s => s.level <= pet.level + 1 && s.level > pet.level);
    
    if (nextStage && pet.xp >= nextStage.level * 100) {
        pet.level = nextStage.level;
        pet.xp = 0;
        showPetEvolutionAnimation(pet, nextStage);
    }
}

function showPetEvolutionAnimation(pet, newStage) {
    // 進化演出
    const evolutionPopup = document.createElement('div');
    evolutionPopup.className = 'evolution-popup';
    evolutionPopup.innerHTML = `
        <div class="evolution-content">
            <h2>🎉 ペット進化！</h2>
            <div class="evolution-animation">
                <span class="old-pet">${pet.currentStage.icon}</span>
                <span class="arrow">→</span>
                <span class="new-pet">${newStage.icon}</span>
            </div>
            <p>${pet.name}が${newStage.name}に進化しました！</p>
        </div>
    `;
    
    document.body.appendChild(evolutionPopup);
    setTimeout(() => evolutionPopup.remove(), 3000);
}
```

#### 6. ショップ機能

**概要**: 獲得したコインでアイテムや装備を購入できる本格的なショップシステム

**なぜ必要か**:
- コインの使い道を提供し、家事完了の報酬に実質的な価値を付与
- 購入による即座の満足感で、短期的なモチベーションを維持
- 目標となるアイテムを設定することで、計画的な家事取り組みを促進
- レアリティシステムで収集欲を刺激
- 家族間での購入報告や相談でコミュニケーション機会を創出

**実装案**:
```javascript
// js/shop.js
function createShopScreen() {
    const shopHTML = `
        <div id="shop" class="content screen">
            <h2>🏪 アイテムショップ</h2>
            <div class="shop-categories">
                <button class="category-btn active" data-category="weapons">武器</button>
                <button class="category-btn" data-category="armor">防具</button>
                <button class="category-btn" data-category="consumables">消耗品</button>
            </div>
            <div id="shopItems" class="shop-items"></div>
        </div>
    `;
    
    document.querySelector('.container').insertAdjacentHTML('beforeend', shopHTML);
    renderShopItems('weapons');
}

function renderShopItems(category) {
    const items = itemDatabase.filter(item => item.type === category);
    const shopItems = document.getElementById('shopItems');
    
    shopItems.innerHTML = items.map(item => `
        <div class="shop-item ${canAfford(item.price) ? '' : 'disabled'}">
            <div class="item-icon">${item.icon}</div>
            <div class="item-info">
                <h3>${item.name}</h3>
                <p class="item-effect">${formatItemEffect(item.effect)}</p>
                <p class="item-price">🪙 ${item.price}</p>
            </div>
            <button class="buy-btn" onclick="buyItem('${item.id}')" 
                    ${canAfford(item.price) ? '' : 'disabled'}>
                購入
            </button>
        </div>
    `).join('');
}

function buyItem(itemId) {
    const item = itemDatabase.find(i => i.id === itemId);
    if (!item || gameState.user.coins < item.price) return;
    
    gameState.user.coins -= item.price;
    gameState.user.inventory.push(itemId);
    
    showPurchaseAnimation(item);
    updateUI();
    renderShopItems(getCurrentCategory());
}
```

### 🌟 低優先度（Phase 3: 体験向上）

#### 7. マップ・ワールド機能

**概要**: 家の各エリアを冒険マップとして視覚化し、エリア別にクエストを管理する世界観システム

**なぜ必要か**:
- 単調なクエスト一覧から脱却し、冒険感のある体験を提供
- 家の各エリア（キッチン、リビング等）に愛着と特別感を演出
- 段階的なエリア解放で、長期的な目標設定と達成感を提供
- 視覚的なマップにより、家事の全体像を把握しやすくする
- 家族で「今日はどのエリアを攻略する？」という会話を促進

**実装案**:
```javascript
// js/worldMap.js
const worldAreas = [
    {
        id: 'kitchen_valley',
        name: '料理の谷',
        icon: '🍳',
        position: { x: 100, y: 200 },
        questCategories: ['kitchen'],
        unlockCondition: { level: 1 }
    },
    {
        id: 'cleaning_mountain',
        name: '掃除の山',
        icon: '🧹',
        position: { x: 300, y: 150 },
        questCategories: ['living', 'bathroom'],
        unlockCondition: { level: 3, completedQuests: 5 }
    }
];

function createWorldMap() {
    const mapCanvas = document.createElement('canvas');
    mapCanvas.width = 400;
    mapCanvas.height = 300;
    mapCanvas.id = 'worldMap';
    
    const ctx = mapCanvas.getContext('2d');
    
    // 背景描画
    drawMapBackground(ctx);
    
    // エリア描画
    worldAreas.forEach(area => {
        if (isAreaUnlocked(area)) {
            drawArea(ctx, area, true);
        } else {
            drawArea(ctx, area, false);
        }
    });
    
    // クリックイベント
    mapCanvas.addEventListener('click', handleMapClick);
    
    return mapCanvas;
}

function handleMapClick(event) {
    const rect = event.target.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;
    
    worldAreas.forEach(area => {
        if (isPointInArea(x, y, area) && isAreaUnlocked(area)) {
            showAreaQuests(area);
        }
    });
}
```

#### 8. チャット・コミュニケーション機能

**概要**: 家族間でリアルタイムにメッセージ交換ができるチャット機能と、クエスト完了の自動通知システム

**なぜ必要か**:
- 現在は個人プレイの色合いが強く、家族間のコミュニケーションが不足
- クエスト完了を家族に報告・共有する手段がない
- 励ましやお疲れ様メッセージで、家事のモチベーションを相互に高められる
- スタンプ機能で気軽なコミュニケーションを促進
- 家事の進捗や困りごとを家族で共有し、協力体制を強化

**実装案**:
```javascript
// js/familyChat.js
function initFamilyChat() {
    const db = getFirestore();
    const chatRef = collection(db, 'familyChats', gameState.user.familyId, 'messages');
    
    // リアルタイムチャット監視
    onSnapshot(query(chatRef, orderBy('timestamp', 'desc'), limit(50)), (snapshot) => {
        const messages = [];
        snapshot.forEach((doc) => {
            messages.push({ id: doc.id, ...doc.data() });
        });
        renderChatMessages(messages.reverse());
    });
}

function sendMessage(text) {
    const db = getFirestore();
    const chatRef = collection(db, 'familyChats', gameState.user.familyId, 'messages');
    
    addDoc(chatRef, {
        text: text,
        sender: gameState.user.nickname,
        senderAvatar: gameState.user.avatar,
        timestamp: serverTimestamp(),
        type: 'text'
    });
}

function sendQuestCompletionMessage(quest) {
    const db = getFirestore();
    const chatRef = collection(db, 'familyChats', gameState.user.familyId, 'messages');
    
    addDoc(chatRef, {
        text: `${quest.title}を完了しました！`,
        sender: gameState.user.nickname,
        senderAvatar: gameState.user.avatar,
        timestamp: serverTimestamp(),
        type: 'quest_completion',
        questData: quest
    });
}
```

#### 9. 高度な通知システム

**概要**: Firebase Cloud Messaging※6を活用した本格的なプッシュ通知※7とスケジュール機能

**なぜ必要か**:
- 現在のデモ通知では実用性が低く、継続的な利用促進ができない
- 朝夕の定時リマインダーで、家事の習慣化を支援
- ボス戦の期限やイベント開始を適切なタイミングで通知
- 家族メンバーの活動通知で、相互のモチベーション向上
- アプリを開いていない時でも、家事への意識を維持

**実装案**:
```javascript
// js/notifications.js (拡張版)
function initAdvancedNotifications() {
    // Firebase Cloud Messaging※6設定
    const messaging = getMessaging();
    
    // 通知権限とトークン取得
    getToken(messaging, { vapidKey: 'YOUR_VAPID_KEY' }).then((currentToken) => {
        if (currentToken) {
            // サーバーにトークンを送信
            saveNotificationToken(currentToken);
        }
    });
    
    // フォアグラウンド通知受信
    onMessage(messaging, (payload) => {
        showInAppNotification(payload);
    });
}

function scheduleLocalNotifications() {
    // 朝のリマインダー
    scheduleNotification('morning_reminder', {
        title: '🌅 おはようございます！',
        body: '今日のクエストを確認しましょう',
        time: '08:00'
    });
    
    // 夕方のリマインダー
    scheduleNotification('evening_reminder', {
        title: '🌆 お疲れ様です！',
        body: 'まだ完了していないクエストがあります',
        time: '18:00'
    });
}

function showInAppNotification(payload) {
    const notification = document.createElement('div');
    notification.className = 'in-app-notification';
    notification.innerHTML = `
        <div class="notification-content">
            <h4>${payload.notification.title}</h4>
            <p>${payload.notification.body}</p>
        </div>
        <button onclick="this.parentElement.remove()">×</button>
    `;
    
    document.body.appendChild(notification);
    
    // 5秒後に自動削除
    setTimeout(() => notification.remove(), 5000);
}
```

#### 10. 季節イベント・特別コンテンツ

**概要**: 季節に応じた特別クエスト、限定アイテム、視覚効果で年間を通じた新鮮な体験を提供

**なぜ必要か**:
- 現在の軽微な背景変更では季節感が不十分で、マンネリ化を防げない
- 期間限定要素により、「今しかできない」という特別感を演出
- 季節の行事と家事を結びつけ、年中行事への参加意欲を向上
- 限定報酬により、コレクション欲と継続プレイ動機を刺激
- 家族で季節の変化を楽しみ、共通の話題を提供

**実装案**:
```javascript
// js/seasonalEvents.js
const seasonalEvents = [
    {
        id: 'spring_cleaning',
        name: '春の大掃除フェスティバル',
        period: { start: '03-01', end: '03-31' },
        specialQuests: [
            {
                id: 'spring_quest_1',
                title: '桜と一緒に窓拭き',
                description: '春の陽気と一緒に窓をピカピカに',
                xpReward: 200,
                coinReward: 100,
                specialReward: 'spring_badge'
            }
        ],
        decorations: {
            background: 'linear-gradient(135deg, #ffeaa7 0%, #fab1a0 100%)',
            particles: 'sakura'
        }
    },
    {
        id: 'winter_wonderland',
        name: 'ウィンター・ワンダーランド',
        period: { start: '12-01', end: '12-31' },
        specialQuests: [
            {
                id: 'winter_quest_1',
                title: '雪だるまと一緒にお掃除',
                description: '寒い冬も楽しく家事をしよう',
                xpReward: 250,
                coinReward: 120,
                specialReward: 'snowman_pet'
            }
        ],
        decorations: {
            background: 'linear-gradient(135deg, #74b9ff 0%, #0984e3 100%)',
            particles: 'snow'
        }
    }
];

function checkAndActivateSeasonalEvent() {
    const now = new Date();
    const currentDate = `${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}`;
    
    const activeEvent = seasonalEvents.find(event => {
        return currentDate >= event.period.start && currentDate <= event.period.end;
    });
    
    if (activeEvent) {
        activateSeasonalEvent(activeEvent);
    }
}

function activateSeasonalEvent(event) {
    // 背景変更
    document.body.style.background = event.decorations.background;
    
    // パーティクルエフェクト追加
    addParticleEffect(event.decorations.particles);
    
    // 特別クエスト追加
    gameState.quests.push(...event.specialQuests);
    
    // イベント告知
    showEventAnnouncement(event);
}
```

---

## 📁 推奨ファイル構成

```
📁 ChoreQuest/
├── 📄 index.html
├── 📄 manifest.json          # PWA設定
├── 📄 service-worker.js      # オフライン対応
├── 📄 README.md
├── 📁 js/
│   ├── 📄 app.js             # メインアプリ制御
│   ├── 📄 gameState.js       # ゲーム状態管理
│   ├── 📄 auth.js            # 認証機能
│   ├── 📄 firebase.js        # Firebase設定・接続
│   ├── 📄 sync.js            # データ同期
│   ├── 📄 ui.js              # UI管理
│   ├── 📄 quests.js          # クエスト機能
│   ├── 📄 boss.js            # ボス戦システム
│   ├── 📄 familySync.js      # 家族間同期
│   ├── 📄 inventory.js       # アイテム・装備管理
│   ├── 📄 pets.js            # ペット育成
│   ├── 📄 shop.js            # ショップ機能
│   ├── 📄 worldMap.js        # マップ・ワールド
│   ├── 📄 familyChat.js      # チャット機能
│   ├── 📄 achievements.js    # 実績システム
│   ├── 📄 seasonalEvents.js  # 季節イベント
│   ├── 📄 audio.js           # 音響効果
│   └── 📄 notifications.js   # 通知システム
├── 📁 css/
│   ├── 📄 main.css           # メインスタイル
│   ├── 📄 animations.css     # アニメーション
│   └── 📄 responsive.css     # レスポンシブ対応
├── 📁 icons/                 # PWAアイコン
└── 📁 assets/                # 画像・音声ファイル
```

---

## 🎯 実装の進め方

### Step 1: 基盤強化（1-2週間）
1. Firebase設定とFirestore連携
2. PWA対応（manifest.json + service-worker.js）
3. 認証システムの実装

### Step 2: リアルタイム機能（1週間）
1. 家族間ボス戦同期
2. リアルタイムランキング
3. 基本的なチャット機能

### Step 3: ゲーム要素拡張（2-3週間）
1. アイテム・装備システム
2. ペット育成機能
3. ショップ機能

### Step 4: 体験向上（1-2週間）
1. マップ・ワールド機能
2. 季節イベント
3. 高度な通知システム

---

## 💡 技術的な考慮事項

### パフォーマンス最適化
- 画像の遅延読み込み（Lazy Loading※16）
- JavaScript※17 の Code Splitting※18
- CSS※19 の最適化とミニファイ※20

### セキュリティ
- Firebase Security Rules※10 の設定
- XSS※11対策（サニタイゼーション※12）
- CSRF※13対策

### アクセシビリティ
- ARIA属性※14の追加
- キーボードナビゲーション対応
- スクリーンリーダー※15対応

### 国際化対応
- 多言語対応の準備
- 日付・時刻のローカライゼーション
- 通貨表示の地域対応

---

この実装案に従って段階的に開発を進めることで、現在のChore Questアプリを本格的なゲーミフィケーションアプリに発展させることができます。

---

## 📚 専門用語解説

※1 **LocalStorage**: ブラウザ内にデータを保存する仕組み。そのブラウザでのみ利用可能で、他の端末や家族とは共有できない

※2 **Firebase**: Googleが提供するクラウドサービス。データベース、認証、ホスティングなどの機能を簡単に利用できる

※3 **Progressive Web App (PWA)**: Webサイトをスマホアプリのように使えるようにする技術。ホーム画面に追加やオフライン利用が可能

※4 **ネイティブアプリ**: App StoreやGoogle Playからダウンロードする通常のスマホアプリ

※5 **アプリストア**: App Store（iPhone）やGoogle Play（Android）などのアプリ配布プラットフォーム

※6 **Firebase Cloud Messaging (FCM)**: Firebaseの通知サービス。アプリを開いていなくても通知を送信できる

※7 **プッシュ通知**: アプリを開いていなくても届く通知。スマホの画面に表示される

※8 **Firestore**: Firebaseのデータベースサービス。リアルタイムでデータを同期できる

※9 **アトミックな更新**: データの整合性を保つため、複数の操作を一度に実行する仕組み

※10 **Firebase Security Rules**: Firestoreのデータアクセス権限を設定するルール

※11 **XSS (Cross-Site Scripting)**: 悪意のあるスクリプトを注入する攻撃手法

※12 **サニタイゼーション**: 入力データから危険な文字や要素を除去・無害化する処理

※13 **CSRF (Cross-Site Request Forgery)**: 利用者の意図しない操作を実行させる攻撃手法

※14 **ARIA属性**: 視覚障害者向けのスクリーンリーダーが理解できるよう、要素の役割を示す属性

※15 **スクリーンリーダー**: 画面の内容を音声で読み上げる、視覚障害者向けの支援技術

※16 **Lazy Loading**: 必要になったタイミングで画像を読み込む技術。ページの表示速度を向上

※17 **JavaScript**: Webページに動的な機能を追加するプログラミング言語

※18 **Code Splitting**: JavaScriptファイルを分割し、必要な部分だけを読み込む最適化技術

※19 **CSS**: Webページの見た目（色、レイアウト等）を定義するスタイルシート言語

※20 **ミニファイ**: ファイルサイズを小さくするため、不要な空白や改行を削除する処理 