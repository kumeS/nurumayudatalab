#── 必要パッケージの読み込み ──
if (!requireNamespace("palmerpenguins", quietly=TRUE)) {
  install.packages("palmerpenguins")
}
if (!requireNamespace("transport", quietly=TRUE)) {
  install.packages("transport")
}
library(palmerpenguins)
library(transport)

#── 1) データ前処理 ──
df <- na.omit(penguins[, c("species",
                           "bill_length_mm",
                           "bill_depth_mm",
                           "flipper_length_mm",
                           "body_mass_g")])

#── 2) PCA による次元圧縮 ──
#    scale.=TRUE で各変数を標準化
pca_res <- prcomp(df[, -1], scale. = TRUE)

#    第一・第二主成分スコアを取得
scores <- as.data.frame(pca_res$x[, 1:2])
colnames(scores) <- c("PC1", "PC2")
scores$species <- df$species

#── 3) 各群のスコア行列とウェイトを作成 ──
groups    <- unique(scores$species)  # 3 群：Adelie, Gentoo, Chinstrap
data_list <- lapply(groups, function(g) {
  as.matrix(scores[scores$species == g, c("PC1","PC2")])
})
weights <- lapply(data_list, function(mat) {
  rep(1 / nrow(mat), nrow(mat))
})

#── 4) 群間の Wasserstein 距離行列を計算 ──
nG   <- length(groups)
Wmat <- matrix(0, nG, nG, dimnames = list(groups, groups))

for (i in seq_len(nG-1)) {
  for (j in (i+1):nG) {
    W <- wasserstein(a = data_list[[i]],
                     b = data_list[[j]],
                     p = 2)
    Wmat[i, j] <- Wmat[j, i] <- W
  }
}

print("群間の 2-Wasserstein 距離行列")
print(round(Wmat, 3))

#── 5) 輸送プランを例示（Adelie ↔ Gentoo 間） ──
C_AG     <- as.matrix(dist(rbind(data_list[[1]], data_list[[2]])))
C_AG     <- C_AG[1:nrow(data_list[[1]]),
                 (nrow(data_list[[1]])+1):nrow(C_AG)]
plan_AG  <- transport(a = weights[[1]],
                      b = weights[[2]],
                      costm = C_AG,
                      method = "shortsimplex")

head(plan_AG)
# plan_AG は data.frame(from, to, mass) を返します

#── 6) 可視化のヒント ──
# library(ggplot2)
# ggplot() +
#   geom_point(aes(PC1, PC2, color=species), data=scores) +
#   geom_segment(data=plan_AG,
#                aes(x     = data_list[[1]][from,1],
#                    y     = data_list[[1]][from,2],
#                    xend  = data_list[[2]][to,1],
#                    yend  = data_list[[2]][to,2],
#                    alpha = mass),
#                arrow = arrow(length = unit(0.1, "cm")))
