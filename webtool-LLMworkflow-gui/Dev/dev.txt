# LLMワークフローエディター プロジェクト完全ドキュメント・開発ガイド

## プロジェクト概要

**LLMワークフローエディター**は、プログラミング知識不要でAIワークフローを直感的に構築できるビジュアルエディターです。ノードベースのドラッグ&ドロップインターフェースにより、複雑なAI処理パイプラインを視覚的に設計・実行・共有できます。

### 🎯 コアバリュープロポジション
1. **ノーコードAI開発**: 複雑なAI処理をGUIで構築
2. **視覚的ワークフロー設計**: ドラッグ&ドロップによる直感操作  
3. **LLM統合**: 最新のAI APIとシームレス連携
4. **コード出力**: 構築したワークフローをJavaScript APIとして自動生成
5. **テンプレート共有**: 再利用可能なワークフローパターンの蓄積

### 🏗️ 技術アーキテクチャ
- **フロントエンド**: Vanilla JavaScript (ES6+), HTML5, CSS3
- **アーキテクチャパターン**: Manager Pattern + Facade Pattern + Observer Pattern  
- **AI統合**: RESTful API経由でのLLM呼び出し
- **データ永続化**: LocalStorage + JSON形式でのエクスポート
- **レンダリング**: Canvas + SVG によるリアルタイム描画

## 📁 完全ファイル構成・アーキテクチャ解析

### 🔧 コアシステムファイル
| ファイル名 | 行数 | 責任範囲 | 重要度 |
|------------|------|----------|--------|
| **index.html** | 654行 | UI定義・CSS・ノードパレット・Google Analytics | ⭐⭐⭐ |
| **app.js** | 112行 | アプリ初期化・グローバル状態・エラーハンドリング | ⭐⭐⭐ |
| **workflow-editor.js** | 522行 | マネージャー統合・メインファサード・イベント調整 | ⭐⭐⭐ |

### 🎛️ マネージャークラス群（責任分離アーキテクチャ）
| ファイル名 | 行数 | 機能概要 | 依存関係 |
|------------|------|----------|----------|
| **node-manager.js** | 402行 | ノードCRUD・ドラッグ&ドロップ・描画 | ViewportManager |
| **connection-manager.js** | 390行 | 接続線描画・実行順序計算・ポート管理 | NodeManager, ViewportManager |
| **viewport-manager.js** | 253行 | ズーム・パン・座標変換・ビューポート制御 | Canvas要素 |
| **properties-manager.js** | 409行 | プロパティUI生成・リアルタイム編集 | NodeManager |
| **storage-manager.js** | 366行 | 自動保存・エクスポート・JSON管理 | 全Managerクラス |  
| **workflow-executor.js** | 434行 | ワークフロー実行・ノード処理・LLM統合 | NodeManager, ConnectionManager |

### 🚀 AI・拡張機能モジュール
| ファイル名 | 行数 | 機能概要 | 実装状況 |
|------------|------|----------|----------|
| **llm.js** | 197行 | LLM API呼び出し・レスポンス解析・エラー処理 | ✅ 実装完了 |
| **code-generator.js** | 820行 | JavaScript API自動生成・テンプレート出力 | ✅ 実装完了 |
| **workflow-templates.js** | 594行 | プリセットワークフロー・テンプレート管理 | ✅ 実装完了 |
| **template-integration.js** | 407行 | テンプレート選択・適用・カスタマイズ | ✅ 実装完了 |
| **workflow-history.js** | 318行 | 実行履歴・パフォーマンス記録・統計 | ✅ 実装完了 |
| **history-integration-js.js** | 319行 | 履歴UI統合・フィルタ・検索機能 | ✅ 実装完了 |
| **workflow-editor-updates.js** | 381行 | エディター機能拡張・UI改善 | ⚠️ 実験的 |
| **code-generation-integration.js** | 339行 | コード生成UI統合・プレビュー機能 | ✅ 実装完了 |

### 📋 補助・実験ファイル
| ファイル名 | 内容 | 状況 |
|------------|------|------|
| **workflow-executor-fix.js** | 実行エンジンバグ修正実験 | 🔍 検証中 |
| **実装案.txt** | プロジェクト初期仕様書 | 📚 参考資料 |
| **CLAUDE.md** | 開発ログ・技術検討記録 | 📚 参考資料 |

### 🔧 採用アーキテクチャパターン

#### 1. **Manager Pattern + Facade Pattern**
- 各機能を独立したManagerクラスに分離（Single Responsibility Principle）
- WorkflowEditorクラスがファサードとして統合・調整
- 疎結合設計により高い保守性と拡張性を実現

#### 2. **Observer Pattern**  
- ノード選択・移動・削除等のイベントをコールバック形式で通知
- リアルタイム更新・自動保存・UI同期を実現
- 各マネージャー間の密結合を回避

#### 3. **Command Pattern**
- ワークフロー実行時に各ノードタイプ別の処理を実行
- 拡張可能なノード処理アーキテクチャ
- Undo/Redo機能の基盤

#### 4. **Module Pattern**
- 名前空間の分離とカプセル化
- グローバル変数汚染の防止
- 段階的な機能読み込み

## 🎯 実装機能・動作状況マトリックス

### ✅ **完全実装済み機能**
| 機能カテゴリ | 具体的な機能 | 実装状況 | テスト状況 |
|-------------|-------------|----------|----------|
| **UI基盤** | レスポンシブレイアウト・ヘッダー・サイドバー・キャンバス | ✅ 完了 | ✅ 動作確認済み |
| **ノードシステム** | 10種類のノードテンプレート（入力・LLM・分岐・統合・変換・フィルタ・ソート・集約・分割・出力） | ✅ 完了 | ✅ 動作確認済み |
| **ドラッグ&ドロップ** | パレットからキャンバスへのノード配置 | ✅ 完了 | ✅ 動作確認済み |
| **データ永続化** | LocalStorage自動保存・手動保存・エクスポート・インポート | ✅ 完了 | ✅ 動作確認済み |
| **初期化システム** | 依存関係解決・エラーハンドリング・グローバル状態管理 | ✅ 完了 | ✅ 動作確認済み |
| **コード生成** | ワークフローからJavaScript API生成・プレビュー機能 | ✅ 完了 | ✅ 動作確認済み |
| **テンプレート** | プリセットワークフロー・カスタムテンプレート・適用機能 | ✅ 完了 | ✅ 動作確認済み |
| **履歴管理** | 実行履歴・パフォーマンス記録・統計・検索機能 | ✅ 完了 | ✅ 動作確認済み |

### ⚠️ **部分実装・要検証機能**  
| 機能カテゴリ | 具体的な機能 | 実装状況 | 課題 |
|-------------|-------------|----------|------|
| **ノード接続** | 出力ポート→入力ポート接続線描画 | 🔧 実装済み | 座標計算・視覚フィードバック要改善 |
| **プロパティ編集** | ノード選択時のプロパティパネル表示・リアルタイム編集 | 🔧 実装済み | UI統合・バリデーション要強化 |
| **ワークフロー実行** | LLM API連携・ノード間データフロー・結果表示 | 🔧 実装済み | エラーハンドリング・並列処理要改善 |
| **ビューポート制御** | ズーム・パン・座標変換 | 🔧 実装済み | 精度・パフォーマンス要改善 |

### 🚧 **未実装・計画中機能**
| 機能カテゴリ | 具体的な機能 | 優先度 | 実装予定 |
|-------------|-------------|--------|----------|
| **自動レイアウト** | 階層レイアウト・フォースディレクト・グリッド整列 | 🔥 高 | Phase 2 |
| **協調編集** | リアルタイム共同編集・変更履歴・コンフリクト解決 | 💡 低 | Phase 4 |
| **プラグインシステム** | カスタムノード・外部API連携・サードパーティ統合 | 💡 低 | Phase 4 |
| **デバッグ機能** | ステップ実行・ブレークポイント・中間結果表示 | 🔧 中 | Phase 3 |

## 🐛 発見済みバグ・技術課題・改善計画

### 🔥 **Critical（即座対応必要）**

#### 1. **ノード重複配置問題**
- **症状**: ドラッグ&ドロップ時にノードが同一位置に配置され重複
- **根本原因**: `viewport-manager.js`の`screenToWorld()`メソッドでパン・ズーム補正が不正確
- **影響範囲**: ノード配置・移動・接続線描画
- **修正コード**:
```javascript
// viewport-manager.js 修正版
screenToWorld(screenX, screenY) {
  const rect = this.canvas.getBoundingClientRect();
  const canvasX = screenX - rect.left;
  const canvasY = screenY - rect.top;
  
  const worldX = (canvasX / this.scale) - (this.panX / this.scale);
  const worldY = (canvasY / this.scale) - (this.panY / this.scale);
  
  return { x: Math.max(0, worldX), y: Math.max(0, worldY) };
}
```

#### 2. **LLM API統合の非同期処理問題**
- **症状**: `workflow-executor.js`でLLM APIが未初期化状態でアクセスされる
- **根本原因**: 非同期初期化順序・DOMContentLoaded前のAPI参照
- **影響範囲**: ワークフロー実行・LLMノード処理
- **修正方針**: API初期化の確実な待機メカニズム実装

#### 3. **接続線座標計算のスケール対応不備**
- **症状**: ズーム・パン時に接続線がノードポートから外れる
- **根本原因**: `connection-manager.js`でビューポート変換が不完全
- **影響範囲**: ノード接続・視覚的整合性

### ⚠️ **High（優先対応）**

#### 4. **プロパティパネルのリアルタイム更新遅延**
- **症状**: ノード選択時のプロパティ表示が遅延・更新されない場合がある
- **原因**: DOM操作とイベントリスナー設定のタイミング問題
- **改善計画**: 仮想DOM or React移行検討

#### 5. **大規模ワークフローでの描画パフォーマンス低下**
- **症状**: 20個超のノードで操作レスポンス悪化
- **原因**: 全ての接続線を毎回再描画・最適化不足
- **改善計画**: レンダリング最適化・差分更新実装

### 🔧 **Medium（計画的対応）**

#### 6. **エラーハンドリングの一貫性不足**
- **症状**: API呼び出しエラー・バリデーションエラーの表示が不統一
- **改善計画**: 統一エラー処理クラス実装・ユーザーフレンドリーなメッセージ

#### 7. **モバイル対応不完全**
- **症状**: タッチデバイスでのドラッグ&ドロップ・ズーム操作が不安定
- **改善計画**: Touch Events対応・レスポンシブUI改善

### 💡 **Low（将来的改善）**

#### 8. **TypeScript化によるコード品質向上**
- **現状**: JSDocによる型注釈はあるが、コンパイル時型チェック不可
- **改善計画**: 段階的TypeScript移行・型安全性向上

#### 9. **テストカバレッジ向上**
- **現状**: 手動テストに依存・自動テスト不足
- **改善計画**: Jest単体テスト・Playwright E2Eテスト導入

## 実装すべき機能・改善案

### 🚀 優先度: 高

#### 1. ノード配置アルゴリズム改善
```javascript
// viewport-manager.js の screenToWorld メソッド修正
screenToWorld(screenX, screenY) {
  const rect = this.canvas.getBoundingClientRect();
  const canvasX = screenX - rect.left;
  const canvasY = screenY - rect.top;
  
  // パンとスケール補正を正しく適用
  const worldX = (canvasX / this.scale) - (this.panX / this.scale);
  const worldY = (canvasY / this.scale) - (this.panY / this.scale);
  
  return { x: worldX, y: worldY };
}
```

#### 2. 自動レイアウト機能
- ノード自動整列（Grid/Force-directed layout）
- 最適な接続線ルーティング
- ノード間距離の自動調整

#### 3. LLM API統合強化
```javascript
// workflow-executor.js に適切なLLM統合
async executeLLMNode(node, connectionManager) {
  const inputs = this.getNodeInputs(node.id, connectionManager);
  const inputText = Array.isArray(inputs) ? inputs.join('\n') : (inputs || '');
  
  let prompt = node.data.prompt || '';
  prompt = prompt.replace(/\{input\}/g, inputText);
  
  try {
    // llm.js のAPI呼び出し使用
    const messages = [{ role: "user", content: prompt }];
    const response = await callLLMAPI(messages);
    return response;
  } catch (error) {
    throw new Error(`LLM処理エラー: ${error.message}`);
  }
}
```

### 🔧 優先度: 中

#### 1. テンプレートシステム強化
- カスタムテンプレート作成機能
- テンプレートのカテゴリ分類
- コミュニティテンプレート共有

#### 2. 実行時デバッグ機能
- ステップ実行・ブレークポイント
- 中間結果の可視化
- 実行時間・コスト計測

#### 3. コード生成機能完成
- TypeScript出力対応
- Python/Node.js APIサーバーテンプレート
- Docker化テンプレート

### 💡 優先度: 低

#### 1. 協調編集機能
- WebSocket/WebRTCによるリアルタイム編集
- 変更履歴・コンフリクト解決
- ユーザー権限管理

#### 2. プラグインシステム
- カスタムノードタイプ追加
- 外部サービス連携（GitHub, Slack等）
- サードパーティAPIコネクター

## 推奨開発手順

### Phase 1: バグ修正・基盤強化 (1-2週間)
1. ノード配置問題の修正
2. LLM API統合の完成
3. エラーハンドリング強化
4. 基本機能の動作確認・テスト

### Phase 2: 機能拡張 (2-3週間)
1. 自動レイアウト機能実装
2. プロパティ編集機能完成
3. ワークフロー実行機能の安定化
4. エクスポート・インポート機能強化

### Phase 3: 高度機能 (3-4週間)
1. コード生成機能完成
2. テンプレートシステム拡張
3. 実行デバッグ機能追加
4. パフォーマンス最適化

### Phase 4: 公開準備 (1-2週間)
1. ドキュメント整備
2. チュートリアル作成
3. ユーザビリティテスト
4. デプロイ・運用準備

## 技術的推奨事項

### 1. モジュール化改善
```javascript
// ES6 modules導入推奨
// workflow-editor-module.js
export class WorkflowEditor {
  // ...
}

// app.js
import { WorkflowEditor } from './workflow-editor-module.js';
```

### 2. 型安全性向上
- JSDocによる型注釈の充実
- TypeScript移行の検討
- 設定オブジェクトのバリデーション強化

### 3. テスト戦略
- 単体テスト（Jest等）の導入
- E2Eテスト（Playwright）の拡充
- 回帰テスト自動化

### 4. CI/CD導入
- GitHub Actions等でのテスト自動化
- 静的解析ツール（ESLint, Prettier）
- 自動デプロイメント

## まとめ

本プロジェクトは非常に野心的で価値のあるコンセプトを持ち、基本的な実装は適切に設計されています。マネージャーパターンによるモジュール化、イベント駆動アーキテクチャ、そして豊富な機能セットが印象的です。

主要な課題は座標系の計算バグとLLM API統合の不完全性ですが、これらは比較的修正しやすい技術的問題です。これらを解決すれば、「AI時代のノーコード開発基盤」として大きなインパクトを持つプロダクトになる可能性があります。

特に、GUIで構築したワークフローからJavaScriptコードを生成し、API化できる機能は他に類を見ない独自性があり、AIアプリケーション開発の民主化に大きく貢献する可能性があります。

---

# AIエージェント向け実行プロンプト集

## 🎯 Step 1: ノード配置バグ修正

### 実施内容
ViewportManagerの座標変換ロジックを修正し、ドラッグ&ドロップ時のノード重複配置問題を解決する。

### 作業ファイル
- `viewport-manager.js` (メイン修正対象)
- `node-manager.js` (連携確認)
- `index.html` (動作テスト)

### 具体的な実装

#### 1.1 viewport-manager.js の screenToWorld メソッド修正
```javascript
// 現在のコード（問題あり）を以下に置換:
screenToWorld(screenX, screenY) {
  const rect = this.canvas.getBoundingClientRect();
  const canvasX = screenX - rect.left;
  const canvasY = screenY - rect.top;
  
  // パンとスケール補正を正しく適用
  const worldX = (canvasX / this.scale) - (this.panX / this.scale);
  const worldY = (canvasY / this.scale) - (this.panY / this.scale);
  
  // ノード重複を避けるためのグリッドスナップ機能追加
  const gridSize = 20;
  const snappedX = Math.round(worldX / gridSize) * gridSize;
  const snappedY = Math.round(worldY / gridSize) * gridSize;
  
  return { 
    x: Math.max(0, snappedX), 
    y: Math.max(0, snappedY) 
  };
}
```

#### 1.2 node-manager.js の createNode メソッド強化
```javascript
// ノード重複チェック機能を追加
createNode(type, x, y) {
  // 既存ノードとの重複チェック
  const minDistance = 180; // ノード間最小距離
  let adjustedX = x;
  let adjustedY = y;
  
  for (const [nodeId, node] of this.nodes) {
    const distance = Math.sqrt(
      Math.pow(node.x - adjustedX, 2) + 
      Math.pow(node.y - adjustedY, 2)
    );
    
    if (distance < minDistance) {
      // 重複回避: 右下にずらす
      adjustedX += minDistance;
      adjustedY += 50;
    }
  }
  
  const nodeId = `node_${this.nodeIdCounter++}`;
  const node = {
    id: nodeId,
    type: type,
    x: adjustedX,
    y: adjustedY,
    data: this.getDefaultNodeData(type)
  };

  this.nodes.set(nodeId, node);
  this.renderNode(node);
  
  return node;
}
```

### 注意点
- 既存のビューポート操作（パン・ズーム）に影響しないよう注意
- グリッドスナップは必要に応じてON/OFF切り替え可能にする
- モバイル端末での座標計算も考慮する

### 他の機能との連携チェック
1. **connection-manager.js**: 接続線の座標計算が正しく更新されるか確認
2. **storage-manager.js**: ノード位置の保存・復元が正常に動作するか確認
3. **properties-manager.js**: ノード選択時の座標表示が正確か確認

### 動作確認手順
1. ブラウザでindex.htmlを開く
2. 同じノードタイプを複数回ドラッグ&ドロップ
3. ノードが重複せず、適切に配置されることを確認
4. ズーム・パン操作後もドラッグ&ドロップが正常動作することを確認

---

## 🤖 Step 2: LLM API統合修正

### 実施内容
workflow-executor.jsとllm.jsの統合を完成させ、LLMノードの実行を正常化する。

### 作業ファイル
- `workflow-executor.js` (メイン修正対象)
- `llm.js` (API仕様確認)
- `index.html` (script読み込み順序確認)

### 具体的な実装

#### 2.1 llm.js のAPI初期化
```javascript
// llm.js の末尾に追加
window.llmAPI = {
  generateText: async function(prompt, options = {}) {
    const messages = [{ role: "user", content: prompt }];
    try {
      const result = await callLLMAPI(messages);
      return result;
    } catch (error) {
      throw new Error(`LLM API Error: ${error.message}`);
    }
  }
};

console.log('LLM API initialized');
```

#### 2.2 workflow-executor.js の executeLLMNode メソッド修正
```javascript
async executeLLMNode(node, connectionManager) {
  const inputs = this.getNodeInputs(node.id, connectionManager);
  const inputText = Array.isArray(inputs) ? inputs.join('\n') : (inputs || '');
  
  // プロンプトの変数置換
  let prompt = node.data.prompt || '';
  prompt = prompt.replace(/\{input\}/g, inputText);
  
  try {
    // window.llmAPI の存在確認
    if (!window.llmAPI) {
      throw new Error('LLM API が初期化されていません');
    }
    
    // LLM API呼び出し
    const response = await window.llmAPI.generateText(prompt, {
      temperature: node.data.temperature || 0.7,
      max_tokens: node.data.maxTokens || 2000
    });
    
    return response;
  } catch (error) {
    console.error('LLM処理エラー:', error);
    throw new Error(`LLM処理エラー: ${error.message}`);
  }
}
```

#### 2.3 エラーハンドリング強化
```javascript
// workflow-executor.js に追加
validateLLMAPIAvailability() {
  if (!window.llmAPI || typeof window.llmAPI.generateText !== 'function') {
    throw new Error('LLM API が利用できません。API設定を確認してください。');
  }
}

// executeWorkflow メソッドの開始時に追加
async executeWorkflow(nodeManager, connectionManager, inputData = {}) {
  if (this.isExecuting) {
    throw new Error('ワークフローは既に実行中です');
  }

  // LLM API可用性チェック
  this.validateLLMAPIAvailability();
  
  // 以下既存コード...
}
```

### 注意点
- API呼び出し時のネットワークエラーハンドリング
- レート制限・タイムアウト対応
- APIレスポンスの形式検証

### 他の機能との連携チェック
1. **workflow-editor.js**: 実行ボタンクリック時のエラー表示
2. **properties-manager.js**: LLMノードのプロンプト編集機能
3. **code-generator.js**: 生成コードでのAPI呼び出し部分

### 動作確認手順
1. 入力ノード → LLMノード → 出力ノードのシンプルなワークフローを作成
2. LLMノードのプロンプトを編集
3. 実行ボタンをクリックしてAPI呼び出しが成功することを確認
4. エラー時の適切なメッセージ表示を確認

---

## 🔗 Step 3: ノード接続機能強化

### 実施内容
ポート間の接続線描画と接続ロジックを改善し、視覚的なフィードバックを向上させる。

### 作業ファイル
- `connection-manager.js` (メイン修正対象)
- `index.html` (CSS修正)
- `node-manager.js` (ポート描画確認)

### 具体的な実装

#### 3.1 ポートクリック時の視覚フィードバック改善
```javascript
// connection-manager.js の startConnection メソッド修正
startConnection(nodeId, portType, e) {
  // 出力ポートからのみ接続開始
  if (portType !== 'output') return;
  
  // 開始ポートをハイライト
  const startPortElement = e.target;
  startPortElement.classList.add('port-active');
  
  const node = this.nodeManager.getNode(nodeId);
  const nodePos = this.nodeManager.getNodePosition(nodeId);
  
  // ポートの正確な位置を計算
  const nodeElement = document.getElementById(nodeId);
  const portElement = nodeElement.querySelector('.port.output');
  const portRect = portElement.getBoundingClientRect();
  const canvasRect = this.connectionsLayer.getBoundingClientRect();
  
  const startX = portRect.left + portRect.width/2 - canvasRect.left;
  const startY = portRect.top + portRect.height/2 - canvasRect.top;
  
  this.currentConnection = {
    fromNode: nodeId,
    fromPort: portType,
    startX: startX,
    startY: startY,
    startPortElement: startPortElement
  };
  
  // 一時的な接続線を作成
  this.tempLine = document.createElementNS('http://www.w3.org/2000/svg', 'path');
  this.tempLine.setAttribute('stroke', '#ff7e5f');
  this.tempLine.setAttribute('stroke-width', '3');
  this.tempLine.setAttribute('fill', 'none');
  this.tempLine.setAttribute('stroke-dasharray', '8,4');
  this.tempLine.setAttribute('opacity', '0.8');
  this.connectionsLayer.appendChild(this.tempLine);
  
  // 接続可能なポートをハイライト
  this.highlightCompatiblePorts(nodeId);
}
```

#### 3.2 接続可能ポートのハイライト機能
```javascript
// connection-manager.js に追加
highlightCompatiblePorts(fromNodeId) {
  const allNodes = this.nodeManager.getAllNodes();
  
  allNodes.forEach(node => {
    if (node.id !== fromNodeId && node.type !== 'input') {
      const nodeElement = document.getElementById(node.id);
      const inputPort = nodeElement?.querySelector('.port.input');
      
      if (inputPort && this.isValidConnection(fromNodeId, node.id)) {
        inputPort.classList.add('port-compatible');
      }
    }
  });
}

clearPortHighlights() {
  document.querySelectorAll('.port').forEach(port => {
    port.classList.remove('port-active', 'port-compatible', 'port-invalid');
  });
}
```

#### 3.3 CSS スタイル強化（index.html に追加）
```css
/* ポートの状態別スタイル */
.port {
  transition: all 0.2s ease;
}

.port.port-active {
  background: #ff4757 !important;
  border-color: #ff3742 !important;
  box-shadow: 0 0 10px rgba(255, 71, 87, 0.5);
  transform: scale(1.2);
}

.port.port-compatible {
  background: #2ed573 !important;
  border-color: #20bf6b !important;
  box-shadow: 0 0 8px rgba(46, 213, 115, 0.4);
  cursor: pointer;
}

.port.port-invalid {
  background: #ff6b6b !important;
  border-color: #ee5253 !important;
  opacity: 0.5;
}

/* 接続線のスタイル強化 */
.connection-line {
  transition: stroke-width 0.2s ease;
}

.connection-line:hover {
  stroke-width: 4;
  stroke: #e74c3c;
  cursor: pointer;
}
```

### 注意点
- 接続線のパフォーマンス（大量ノード時）
- タッチデバイスでの操作性
- 既存接続の削除機能

### 他の機能との連携チェック
1. **viewport-manager.js**: ズーム時の接続線座標更新
2. **storage-manager.js**: 接続情報の保存・復元
3. **workflow-executor.js**: 接続に基づく実行順序計算

---

## 📊 Step 4: プロパティパネル機能完成

### 実施内容
ノード選択時のプロパティ編集機能を完成させ、リアルタイム更新を実装する。

### 作業ファイル
- `properties-manager.js` (メイン修正対象)
- `node-manager.js` (連携確認)
- `index.html` (UI改善)

### 具体的な実装

#### 4.1 動的プロパティフォーム生成
```javascript
// properties-manager.js の showNodeProperties メソッド拡張
showNodeProperties(nodeId) {
  const node = this.nodeManager.getNode(nodeId);
  if (!node) return;

  const content = document.getElementById('propertiesContent');
  content.innerHTML = '';

  // ノードタイプ別のプロパティフォームを生成
  const formHTML = this.generatePropertyForm(node);
  content.innerHTML = formHTML;

  // リアルタイム更新イベントリスナー設定
  this.attachPropertyEventListeners(nodeId);
  
  // プロパティパネルを表示
  this.showPropertiesPanel();
}

generatePropertyForm(node) {
  const nodeTypeConfig = {
    input: [
      { key: 'name', label: 'ノード名', type: 'text' },
      { key: 'description', label: '説明', type: 'textarea' },
      { key: 'inputType', label: '入力タイプ', type: 'select', 
        options: ['text', 'number', 'file', 'json'] },
      { key: 'defaultValue', label: 'デフォルト値', type: 'textarea' }
    ],
    llm: [
      { key: 'name', label: 'ノード名', type: 'text' },
      { key: 'description', label: '説明', type: 'textarea' },
      { key: 'prompt', label: 'プロンプト', type: 'textarea', rows: 6 },
      { key: 'temperature', label: 'Temperature', type: 'range', 
        min: 0, max: 1, step: 0.1 },
      { key: 'maxTokens', label: '最大トークン数', type: 'number', min: 1 }
    ],
    // 他のノードタイプも同様に定義...
  };

  const config = nodeTypeConfig[node.type] || [];
  let formHTML = `<h4><i class="fas fa-cog"></i> ${node.data.name || node.type}</h4>`;

  config.forEach(field => {
    const value = node.data[field.key] || '';
    formHTML += this.generateFieldHTML(field, value);
  });

  return formHTML;
}
```

#### 4.2 リアルタイム更新機能
```javascript
// properties-manager.js に追加
attachPropertyEventListeners(nodeId) {
  const content = document.getElementById('propertiesContent');
  
  // 全入力要素にイベントリスナーを設定
  content.querySelectorAll('input, textarea, select').forEach(element => {
    const updateHandler = (e) => {
      const fieldKey = e.target.dataset.field;
      let value = e.target.value;
      
      // 型変換
      if (e.target.type === 'number') {
        value = parseFloat(value) || 0;
      } else if (e.target.type === 'range') {
        value = parseFloat(value);
        // range値表示を更新
        const display = content.querySelector(`[data-display="${fieldKey}"]`);
        if (display) display.textContent = value;
      }
      
      // ノードデータを更新
      this.updateNodeProperty(nodeId, fieldKey, value);
    };
    
    element.addEventListener('input', updateHandler);
    element.addEventListener('change', updateHandler);
  });
}

updateNodeProperty(nodeId, key, value) {
  if (!this.nodeManager) return;
  
  const node = this.nodeManager.getNode(nodeId);
  if (!node) return;
  
  // データ更新
  node.data[key] = value;
  
  // ノード表示更新（名前・説明が変更された場合）
  if (key === 'name' || key === 'description') {
    this.nodeManager.updateNodeDisplay(nodeId);
  }
  
  // 変更通知
  if (this.onPropertiesChanged) {
    this.onPropertiesChanged(nodeId, key, value);
  }
}
```

### 注意点
- プロパティ変更時のUndoポイント作成
- 不正な値の入力バリデーション
- プロパティパネルの レスポンシブ対応

### 他の機能との連携チェック
1. **storage-manager.js**: プロパティ変更の自動保存
2. **workflow-executor.js**: 変更されたプロパティでの実行
3. **code-generator.js**: プロパティ値のコード出力

---

## 🚀 Step 5: 自動レイアウト機能実装

### 実施内容
ノードの自動整列機能を実装し、大規模ワークフローの可読性を向上させる。

### 作業ファイル
- `layout-manager.js` (新規作成)
- `workflow-editor.js` (統合)
- `index.html` (UI追加)

### 具体的な実装

#### 5.1 新規ファイル作成: layout-manager.js
```javascript
class LayoutManager {
  constructor(nodeManager, connectionManager) {
    this.nodeManager = nodeManager;
    this.connectionManager = connectionManager;
  }

  // 階層レイアウト（左から右）
  applyHierarchicalLayout() {
    const nodes = this.nodeManager.getAllNodes();
    const connections = this.connectionManager.getAllConnections();
    
    // トポロジカルソートで階層を決定
    const layers = this.calculateNodeLayers(nodes, connections);
    
    // 各階層でのY座標調整
    const layerHeight = 150;
    const nodeSpacing = 200;
    
    layers.forEach((layer, layerIndex) => {
      const layerX = 100 + (layerIndex * 300);
      
      layer.forEach((nodeId, nodeIndex) => {
        const layerY = 100 + (nodeIndex * layerHeight);
        this.nodeManager.moveNode(nodeId, layerX, layerY);
      });
    });
    
    // 接続線を更新
    setTimeout(() => {
      this.connectionManager.updateConnections();
    }, 100);
  }

  // Force-directed レイアウト
  applyForceDirectedLayout() {
    const nodes = this.nodeManager.getAllNodes();
    const connections = this.connectionManager.getAllConnections();
    
    // 物理シミュレーション実装
    const simulation = this.createForceSimulation(nodes, connections);
    this.runSimulation(simulation, 100); // 100ステップ実行
  }

  calculateNodeLayers(nodes, connections) {
    const layers = [];
    const visited = new Set();
    const nodeMap = new Map(nodes.map(n => [n.id, n]));
    
    // 入力ノードから開始
    const inputNodes = nodes.filter(n => n.type === 'input');
    layers[0] = inputNodes.map(n => n.id);
    visited.add(...layers[0]);
    
    let currentLayer = 0;
    while (visited.size < nodes.length) {
      const nextLayer = [];
      
      connections.forEach(conn => {
        if (visited.has(conn.from) && !visited.has(conn.to)) {
          nextLayer.push(conn.to);
          visited.add(conn.to);
        }
      });
      
      if (nextLayer.length === 0) break;
      
      layers[++currentLayer] = nextLayer;
    }
    
    return layers;
  }
}
```

#### 5.2 workflow-editor.js への統合
```javascript
// workflow-editor.js のコンストラクタに追加
this.layoutManager = new LayoutManager(this.nodeManager, this.connectionManager);

// レイアウトボタンのイベントリスナー追加
initEventListeners() {
  // 既存コード...
  
  // 自動レイアウトボタン
  const hierarchicalLayoutBtn = document.getElementById('hierarchicalLayoutBtn');
  if (hierarchicalLayoutBtn) {
    hierarchicalLayoutBtn.addEventListener('click', () => {
      this.layoutManager.applyHierarchicalLayout();
      this.storageManager.saveWorkflow();
    });
  }
  
  const forceLayoutBtn = document.getElementById('forceLayoutBtn');
  if (forceLayoutBtn) {
    forceLayoutBtn.addEventListener('click', () => {
      this.layoutManager.applyForceDirectedLayout();
      this.storageManager.saveWorkflow();
    });
  }
}
```

#### 5.3 HTML UIコントロール追加
```html
<!-- index.html のheader-controls に追加 -->
<div class="toolbar">
  <!-- 既存ボタン... -->
  <button class="button secondary" id="hierarchicalLayoutBtn" title="階層レイアウト">
    <i class="fas fa-sitemap"></i>
  </button>
  <button class="button secondary" id="forceLayoutBtn" title="フォースレイアウト">
    <i class="fas fa-project-diagram"></i>
  </button>
</div>
```

### 注意点
- レイアウト計算のパフォーマンス最適化
- ユーザーによる手動配置の保護
- アニメーション効果の追加

### 他の機能との連携チェック
1. **viewport-manager.js**: レイアウト後のビューポート調整
2. **storage-manager.js**: レイアウト結果の保存
3. **connection-manager.js**: 接続線の再描画

---

## 📋 全ステップ完了後の総合確認

---

# 🧪 実際のブラウザで動作確認すべき20項目

## 基本UI・初期化テスト（4項目）

### 1. **アプリケーション起動確認**
- **操作**: ブラウザで`index.html`をfile://プロトコルで開く
- **期待結果**: エラーなくロード、ヘッダー・サイドバー・キャンバスが表示される
- **確認点**: コンソールエラーなし、Google Analytics読み込み完了

### 2. **レスポンシブレイアウト確認**
- **操作**: ブラウザウィンドウサイズを変更（1920x1080→1024x768→768x1024）
- **期待結果**: UI要素が適切にリサイズ、スクロールバー適切表示
- **確認点**: サイドバー・プロパティパネルの表示崩れなし

### 3. **ノードパレット表示確認**
- **操作**: サイドバーの「ノードパレット」セクション確認
- **期待結果**: 10種類のノードテンプレート（入力・LLM・分岐・統合・変換・フィルタ・ソート・集約・分割・出力）が正しく表示
- **確認点**: アイコン・ラベル・draggable属性設定確認

### 4. **初期状態のローカルストレージ確認**
- **操作**: 開発者ツール→Application→Local Storageで`llm-workflow-editor`キーを確認
- **期待結果**: 空のワークフローデータまたはデフォルト設定が保存されている
- **確認点**: JSON形式の正しい構造

## ノード操作テスト（6項目）

### 5. **基本ドラッグ&ドロップ操作**
- **操作**: 「入力ノード」をパレットからキャンバス中央にドラッグ&ドロップ
- **期待結果**: ノードがキャンバスに配置、重複なし、適切な位置に表示
- **確認点**: ノードの座標計算正確性、視覚的フィードバック

### 6. **複数ノード配置テスト**
- **操作**: 異なる5種類のノード（入力・LLM・分岐・統合・出力）を順次配置
- **期待結果**: 各ノードが重複せず、自動的に間隔を空けて配置
- **確認点**: ノード間最小距離（180px）の確保、レイアウト適切性

### 7. **ノード選択・移動操作**
- **操作**: 配置済みノードをクリックして選択→ドラッグして移動
- **期待結果**: 選択時にハイライト表示、ドラッグ中にスムーズ移動
- **確認点**: 選択状態の視覚フィードバック、移動時の座標更新

### 8. **ノード削除操作**
- **操作**: ノード選択後、Deleteキーを押下
- **期待結果**: ノードが削除、関連する接続線も削除、プロパティパネル閉じる
- **確認点**: 削除後の状態整合性、メモリリーク防止

### 9. **ノードプロパティ編集**
- **操作**: LLMノードを選択→プロパティパネルでプロンプトを編集
- **期待結果**: プロパティパネル表示、入力内容がリアルタイム反映
- **確認点**: プロパティフォーム生成、バリデーション、自動保存

### 10. **ズーム・パン操作でのノード表示**
- **操作**: マウスホイールでズーム、右クリックドラッグでパン
- **期待結果**: ノード・接続線が正しくスケール、座標変換正確
- **確認点**: ビューポート変換の精度、レンダリングパフォーマンス

## ノード接続テスト（4項目）

### 11. **基本接続線描画**
- **操作**: 入力ノードの出力ポート→LLMノードの入力ポートをマウスで接続
- **期待結果**: 接続中に一時線表示、完了時にベジェ曲線の接続線描画
- **確認点**: ポート間の正確な座標計算、視覚フィードバック

### 12. **接続可能性のハイライト**
- **操作**: 出力ポートからドラッグ開始時の他ポートの表示変化
- **期待結果**: 接続可能ポートが緑色、不可能ポートが赤色でハイライト
- **確認点**: 接続ルールの正確な適用、ハイライト解除

### 13. **無効接続の防止**
- **操作**: 入力ノード→入力ノード、出力ノード→任意ノードの接続を試行
- **期待結果**: 接続が拒否され、エラーメッセージまたはフィードバック表示
- **確認点**: 接続バリデーション、循環参照防止

### 14. **複雑なワークフロー接続**
- **操作**: 入力→LLM→分岐→[統合, 変換]→出力の複数分岐統合ワークフロー作成
- **期待結果**: 全ての接続線が正確に描画、実行順序が適切に計算
- **確認点**: 複雑なトポロジーでの描画品質、パフォーマンス

## ワークフロー実行テスト（3項目）

### 15. **シンプルワークフロー実行**
- **操作**: 入力ノード「Hello, World!」→LLMノード（簡単なプロンプト）→出力ノード作成後、実行ボタンクリック
- **期待結果**: LLM API呼び出し成功、結果が出力ノードに表示
- **確認点**: API レスポンス処理、エラーハンドリング、実行時間

### 16. **分岐統合ワークフロー実行**
- **操作**: 入力→分岐（条件：文字数>10）→[True:LLM処理, False:そのまま]→統合→出力のワークフロー実行
- **期待結果**: 条件に応じて適切な分岐実行、結果が統合されて出力
- **確認点**: 条件評価の正確性、分岐ロジック、データフロー

### 17. **エラーハンドリング確認**
- **操作**: LLMノードに空のプロンプト設定、ネットワーク無効状態で実行
- **期待結果**: 適切なエラーメッセージ表示、アプリケーションクラッシュなし
- **確認点**: ユーザーフレンドリーなエラー表示、回復可能性

## データ永続化・共有テスト（3項目）

### 18. **自動保存・復元確認**
- **操作**: ワークフロー作成→ページ更新→自動復元確認
- **期待結果**: ノード配置・接続・プロパティが正確に復元
- **確認点**: LocalStorageデータの整合性、復元時の座標精度

### 19. **エクスポート・インポート機能**
- **操作**: 作成したワークフローをJSONエクスポート→別ブラウザでインポート
- **期待結果**: 全ての要素が正確に再現、エクスポートファイルの可読性
- **確認点**: JSON形式の正確性、クロスブラウザ互換性

### 20. **JavaScriptコード生成確認**
- **操作**: 完成したワークフローで「コード生成」ボタンクリック
- **期待結果**: 実行可能なJavaScript APIコードが生成・プレビュー表示
- **確認点**: 生成コードの構文正確性、実行可能性、可読性

---

## 🎯 優先動作確認順序

### Phase 1: 基礎機能確認（項目1-4, 5-8）
**目的**: アプリケーションの基本動作確認
**所要時間**: 30分

### Phase 2: 核心機能確認（項目9-14）  
**目的**: ノード操作・接続機能の品質確認
**所要時間**: 45分

### Phase 3: 統合機能確認（項目15-20）
**目的**: エンドツーエンド機能・データ永続化確認
**所要時間**: 60分

---

## 🛠️ 推奨テスト環境

- **ブラウザ**: Chrome 120+, Firefox 120+, Safari 17+ 
- **解像度**: 1920x1080（メイン）、1024x768（タブレット）、768x1024（モバイル）
- **ネットワーク**: 正常時・制限時・オフライン時での動作確認
- **デバイス**: デスクトップ・タブレット・スマートフォンでの操作性確認

### パフォーマンステスト
- 50ノード以上の大規模ワークフローでの動作確認
- モバイルデバイスでの操作性確認
- ネットワーク切断時のエラーハンドリング確認

### コード品質確認
- ESLint等での静的解析実行
- 未使用コードの削除
- コメント・ドキュメントの整備 