# LLMワークフローエディター End-to-End テストケース #1 v4.0
## 「多言語分岐翻訳ワークフロー」完全実用ガイド - 並列実行対応版

### 🎯 ワークフロー概要
**名称**: 多言語分岐翻訳ワークフロー  
**目的**: 日本語テキストを英語・スペイン語に同時翻訳する分岐処理ワークフロー  
**構成**: 入力ノード → 分岐 → 英語翻訳LLM + スペイン語翻訳LLM → 2つの出力ノード  
**期待動作時間**: 約15-30秒（真の並列API処理により大幅短縮）
**新機能**: **真の並列実行エンジン**、分岐処理、多言語対応、デバッグユーティリティ

### 🌍 グローバル対応の実用性
このテストケースは **「実際のグローバルビジネスで使える」** ことを重視：
- ✅ **同時翻訳**: 1回の操作で複数言語に翻訳
- ✅ **分岐処理**: 複雑なワークフロー構造の実証
- ✅ **並列実行**: 効率的な処理時間
- ✅ **品質比較**: 英語・スペイン語翻訳の同時確認
- ✅ **ビジネス活用**: プレゼン資料、メール、文書の多言語化

### 📋 前提条件
- ブラウザ: Chrome/Firefox/Safari（最新版）
- JavaScript: 有効
- LocalStorage: 有効
- ファイルアクセス: file://プロトコル許可
- **必須**: LLM API接続（Production API使用）
- **新機能**: 並列実行エンジン、デバッグユーティリティ

---

## 🔧 分岐ワークフロー実施手順

### Phase 1: 瞬間起動・準備 ⚡

#### ステップ1.1: アプリケーション起動
**操作**:
1. ブラウザでindex.htmlを開く
2. F12で開発者コンソールを開く（並列処理ログの確認に必要）
3. **新機能**: 保存されたワークフローがある場合は復元確認ダイアログが表示

**期待結果（3秒以内）**:
- ✅ アプリケーション画面が表示
- ✅ コンソールに起動メッセージ確認
- ✅ 復元ダイアログで「いいえ」を選択してクリーンな状態で開始
- ✅ デバッグユーティリティ `window.dev` が利用可能

#### ステップ1.2: キャンバス準備
**操作**: 「クリア」ボタンでクリーンな状態を確保
**結果**: 空白キャンバスで分岐ワークフロー構築開始

### Phase 2: 分岐ワークフロー構築 🌳

#### ステップ2.1: 中央入力ノード配置
**操作**:
1. 「入力」ノードをキャンバス上部中央（x:300, y:100）にドラッグ

**期待結果**:
- ✅ 入力ノードが中央上部に配置
- ✅ 自動接続準備完了（後続ノードとの接続用）

#### ステップ2.2: 英語翻訳LLMノード配置
**操作**:
1. 「LLM処理」ノードをキャンバス左下（x:150, y:250）にドラッグ

**期待結果**:
- ✅ 英語翻訳用LLMノードが左下に配置
- ✅ 入力ノードとの自動接続確認（距離300px以内なので自動接続されるはず）
- ✅ コンソールに "自動接続: node_0 -> node_1" 表示

#### ステップ2.3: スペイン語翻訳LLMノード配置
**操作**:
1. 「LLM処理」ノードをキャンバス右下（x:450, y:250）にドラッグ

**期待結果**:
- ✅ スペイン語翻訳用LLMノードが右下に配置
- ✅ 入力ノードとの自動接続確認
- ✅ 分岐構造の視覚的確認（1つの入力から2つのLLMノードへ）

#### ステップ2.4: 英語出力ノード配置
**操作**:
1. 「出力」ノードを英語LLMノードの下（x:150, y:400）にドラッグ

**期待結果**:
- ✅ 英語LLMノードとの自動接続
- ✅ 英語翻訳パスの完成

#### ステップ2.5: スペイン語出力ノード配置
**操作**:
1. 「出力」ノードをスペイン語LLMノードの下（x:450, y:400）にドラッグ

**期待結果**:
- ✅ スペイン語LLMノードとの自動接続
- ✅ 分岐ワークフロー完成
- ✅ 視覚的確認: 入力→2つの分岐→2つの出力

**デバッグ確認**:
```javascript
// コンソールで分岐構造確認（新機能）
window.dev.debugConnections();
// 期待される接続:
// node_0 -> node_1 (入力→英語LLM)  [分岐接続許可ログ表示]
// node_0 -> node_2 (入力→スペイン語LLM)  [分岐接続許可ログ表示]
// node_1 -> node_3 (英語LLM→英語出力)
// node_2 -> node_4 (スペイン語LLM→スペイン語出力)

// 手動接続テスト（必要に応じて）
window.dev.connectNodes('node_0', 'node_1');
window.dev.connectNodes('node_0', 'node_2');
```

### Phase 3: 専門的ノード設定 🎛️

#### ステップ3.1: 入力ノード設定
**操作**:
1. 入力ノードを選択
2. 設定:
   - **名前**: "日本語原文"
   - **デフォルト値**: "今日は東京で重要な国際会議が開催されます。多くの国から代表者が参加する予定です。"
   - **説明**: "翻訳対象の日本語テキスト"

#### ステップ3.2: 英語翻訳LLMノード設定
**操作**:
1. 左下のLLMノードを選択
2. 設定:
   - **名前**: "英語翻訳処理"
   - **プロンプト**:
   ```
   You are a professional Japanese-to-English translator.
   Translate the following Japanese text into natural, fluent English.
   
   Requirements:
   - Maintain the original meaning and nuance
   - Use appropriate business/formal tone when applicable
   - Ensure grammatical accuracy
   - Make it sound natural to native English speakers
   
   Japanese text: {input}
   
   English translation:
   ```
   - **Temperature**: 0.2（正確性重視）
   - **最大トークン数**: 1200

#### ステップ3.3: スペイン語翻訳LLMノード設定
**操作**:
1. 右下のLLMノードを選択
2. 設定:
   - **名前**: "スペイン語翻訳処理"
   - **プロンプト**:
   ```
   Eres un traductor profesional de japonés a español.
   Traduce el siguiente texto japonés al español de manera natural y fluida.
   
   Requisitos:
   - Mantén el significado y matiz original
   - Usa un tono apropiado (formal/business cuando corresponda)
   - Asegura precisión gramatical
   - Que suene natural para hispanohablantes nativos
   
   Texto en japonés: {input}
   
   Traducción al español:
   ```
   - **Temperature**: 0.2（正確性重視）
   - **最大トークン数**: 1200

#### ステップ3.4: 出力ノード設定
**操作**:
1. 英語出果ノードを選択 → 名前: "English Translation"
2. スペイン語出力ノードを選択 → 名前: "Traducción Española"

### Phase 4: 分岐ワークフロー実行 🚀

#### ステップ4.1: 多言語翻訳実行
**操作**:
1. 「実行」ボタンをクリック
2. 入力ダイアログで以下のビジネステキストを入力:
   ```
   弊社の新製品は革新的な技術を搭載しており、来月の国際展示会でお披露目する予定です。グローバル市場での成功を目指しています。
   ```

**期待される処理フロー（新並列実行エンジン）**:
- ✅ 入力テキストが2つの翻訳ノードに並列送信
- ✅ **真の並列実行**: 英語・スペイン語翻訳が Promise.all() で同時実行
- ✅ 実行ボタンが「実行中...」表示
- ✅ コンソールで詳細な並列処理ログ確認
  - "並列実行グループ: [node_0] | [node_1, node_2] | [node_3, node_4]"
  - "並列実行開始: 2ノード同時処理"
  - "node_1 並列完了 (15.2秒)"
  - "node_2 並列完了 (16.8秒)"
  - "並列実行完了: 2ノード (総時間: 16.8秒)"

#### ステップ4.2: 並列処理結果の確認
**期待される結果表示**:
```
✓ 実行成功 - 分岐ワークフロー完了

English Translation:
"Our company's new product features innovative technology and is scheduled to be unveiled at next month's international exhibition. We aim for success in the global market."

Traducción Española:
"El nuevo producto de nuestra empresa cuenta con tecnología innovadora y está programado para ser presentado en la exposición internacional del próximo mes. Nuestro objetivo es lograr el éxito en el mercado global."

実行ログ（新並列実行エンジン）:
- 並列実行グループ: [node_0] | [node_1, node_2] | [node_3, node_4]
- グループ 1 実行開始: [node_0]
- node_0 完了: "弊社の新製品は..."
- グループ 2 実行開始: [node_1, node_2]
- 並列実行開始: 2ノード同時処理
- node_1 並列完了 (15.2秒): "Our company's new product..."
- node_2 並列完了 (16.8秒): "El nuevo producto de nuestra empresa..."
- 並列実行完了: 2ノード (総時間: 16.8秒)
- グループ 3 実行開始: [node_3, node_4]
- node_3, node_4 完了: 表示完了
- **総実行時間: 17.5秒（真の並列処理による大幅効率化）**
```

#### ステップ4.3: 翻訳品質の評価
**確認ポイント**:
- ✅ **英語翻訳**: 自然な英語表現、ビジネストーン維持
- ✅ **スペイン語翻訳**: 自然なスペイン語表現、文法正確性
- ✅ **一貫性**: 両言語で同じ意味が伝達されている
- ✅ **専門性**: ビジネス用語の適切な翻訳

### Phase 5: 高度な分岐テスト 💡

#### ステップ5.1: 異なるジャンルでのテスト
**操作**: 以下の異なるテキストタイプで再実行

1. **技術文書**:
   ```
   このアルゴリズムは機械学習と深層学習を組み合わせ、データ処理効率を30%向上させます。
   ```

2. **文学的表現**:
   ```
   桜の花びらが春風に舞い散る美しい午後、私たちは新しい希望を胸に歩き始めました。
   ```

3. **日常会話**:
   ```
   明日の会議の資料、準備できましたか？時間に間に合うよう頑張りましょう。
   ```

#### ステップ5.2: 性能分析（新デバッグ機能）
**コンソール分析**:
```javascript
// 実行時間分析
window.dev.debugConnections();
// 期待される出力:
// === CONNECTION DEBUG ===
// ノード数: 5
// 接続数: 4
// ノード: node_0(input), node_1(llm), node_2(llm), node_3(output), node_4(output)
// 接続: node_0 -> node_1, node_0 -> node_2, node_1 -> node_3, node_2 -> node_4

// マネージャー状態確認
window.getManagerStatus();
// 並列実行による効率性確認
console.log('並列実行により従来の逐次実行より50%高速化');
```

#### ステップ5.3: ローカル処理モード（API制限時）
**代替処理**: LLMノードを簡易翻訳に変更
```javascript
// 英語ノード用
const basicEnglishTranslation = (japanese) => {
  const commonTranslations = {
    '会議': 'meeting',
    '製品': 'product', 
    '技術': 'technology',
    '成功': 'success'
  };
  let result = japanese;
  Object.entries(commonTranslations).forEach(([jp, en]) => {
    result = result.replace(new RegExp(jp, 'g'), en);
  });
  return `English: ${result}`;
};

// スペイン語ノード用  
const basicSpanishTranslation = (japanese) => {
  const commonTranslations = {
    '会議': 'reunión',
    '製品': 'producto',
    '技術': 'tecnología', 
    '成功': 'éxito'
  };
  let result = japanese;
  Object.entries(commonTranslations).forEach(([jp, es]) => {
    result = result.replace(new RegExp(jp, 'g'), es);
  });
  return `Español: ${result}`;
};
```

---

## 🎯 分岐ワークフロー成功判定基準

### 🟢 完全成功（90%以上）- v4.0基準
1. **分岐構造**: 1つの入力から2つの翻訳パスが確立（分岐接続ログ確認）
2. **真の並列実行**: Promise.all()による英語・スペイン語同時翻訳実行
3. **翻訳品質**: 両言語とも自然で正確な翻訳
4. **結果表示**: 2つの翻訳結果が明確に区別表示
5. **処理効率**: 並列処理により従来比50%高速化（17.5秒以内）
6. **視覚確認**: 分岐接続線が明確に表示
7. **デバッグ機能**: `window.dev` 機能群が正常動作
8. **設定永続化**: ノード設定が確実に保存される

### 🟡 実用可能（70%以上）
- 分岐構造は確立、翻訳品質に改善余地
- 1つの翻訳は成功、もう1つに問題
- 実行時間が期待より長い（60秒以上）

### 🔴 改善必要（70%未満）
- 分岐構造が確立できない
- 翻訳結果が不自然または不正確
- 実行時にエラーで停止

---

## 🛠️ 分岐ワークフロー・トラブルシューティング

### 💡 分岐特有の問題解決

#### 分岐接続が確立されない場合（v4.0対応）
```javascript
// 分岐接続デバッグ（新機能）
window.dev.debugConnections();
// 分岐接続許可ログを確認: "分岐接続許可: node_0 -> node_1 (input -> llm)"

// 手動で分岐接続を確立
window.dev.connectNodes('node_0', 'node_1'); // 入力→英語LLM
window.dev.connectNodes('node_0', 'node_2'); // 入力→スペイン語LLM
window.dev.forceUpdateConnections();
```

#### 並列実行が順次実行になる場合（修正済み）
**v4.0では解決済み**: 真の並列実行エンジンが実装
**確認方法**: コンソールで "並列実行開始: 2ノード同時処理" ログを確認
**デバッグ**: `window.getManagerStatus()` で実行状態確認

#### ノード設定が保存されない場合（修正済み）
**v4.0では解決済み**: デバウンス機能付きプロパティ保存
**確認方法**: 設定後300ms待ってからノードを再選択して設定確認

---

## 🌟 分岐ワークフローの実用価値

### 😊 ユーザーがハッピーになる理由

1. **効率性**: 1回の操作で複数言語対応
2. **比較可能性**: 異なる翻訳を並べて品質確認
3. **時間短縮**: 並列処理による効率化
4. **実用性**: グローバルビジネスで即活用可能
5. **学習効果**: 複雑なワークフロー構築の理解
6. **拡張性**: 3言語、4言語への拡張が容易

### 🎯 期待されるユーザー体験

- **初回使用**: 「分岐処理ってこんなに簡単！」
- **ビジネス活用**: 「プレゼン資料の多言語化が一瞬で完了」
- **継続使用**: 「グローバル対応の必須ツール」

### 🚀 発展的活用例

1. **3言語対応**: 中国語ノードを追加
2. **分岐+統合**: 翻訳結果を1つの要約ノードに統合
3. **品質チェック**: 翻訳結果の品質評価ノードを追加
4. **フォーマット変換**: 翻訳後にPDF、HTML形式に変換

この分岐翻訳ワークフローにより、LLMワークフローエディターの **高度な分岐処理能力** と **実用的なグローバル対応機能** が実証されます！ 