素晴らしい要件です！
**モード切替バー付きUI／二分割出力／コピー可・不可制御／初期化ボタン** すべて実現可能です。
まずは「UIイメージ」と「各モードの実行例」サンプルコードをまとめます。

---

## 【UI仕様の概要】

1. **モード切り替えバー（タブ）**

   * 日本語→英語翻訳
   * 日本語の校閲
   * 英語の校閲
2. **入力欄**
3. **出力エリア二分割**

   * 「最終結果」：コピー可能（テキストエリア）
   * 「校閲結果」等：コピー不可（div固定表示）
4. **実行ボタン**
5. **初期化ボタン**

---

## 【HTML & JS実装例（ベース）】

```html
<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>LLMモード切替デモ</title>
  <style>
    .tab { cursor:pointer; display:inline-block; padding:8px 16px; border:1px solid #aaa; }
    .tab.active { background:#eee; font-weight:bold; }
    #review { background: #faf8f0; border: 1px solid #e0e0e0; padding: 8px; user-select: none; }
    #review.nocopy { -webkit-user-select: none; user-select: none; }
    #final { width:100%; min-height:60px; }
    #inputArea { width:100%; min-height:60px; }
    .hidden { display:none; }
    .btn { margin: 8px 2px; }
  </style>
</head>
<body>
  <div>
    <span class="tab active" id="tab-jaen"    onclick="switchTab('jaen')">日本語→英語</span>
    <span class="tab"        id="tab-jajarev" onclick="switchTab('jajarev')">日本語校閲</span>
    <span class="tab"        id="tab-enrev"   onclick="switchTab('enrev')">英語校閲</span>
  </div>
  <div>
    <textarea id="inputArea" placeholder="ここに入力"></textarea>
  </div>
  <div>
    <button class="btn" onclick="runLLM()">実行</button>
    <button class="btn" onclick="resetUI()">初期化</button>
  </div>
  <div style="margin-top:16px;">
    <label>最終結果（コピー可）：</label>
    <textarea id="final" readonly></textarea>
  </div>
  <div style="margin-top:8px;">
    <label>校閲結果など（コピー不可）：</label>
    <div id="review" class="nocopy"></div>
  </div>
<script>
let currentMode = 'jaen'; // デフォルト

function switchTab(mode) {
  currentMode = mode;
  document.querySelectorAll('.tab').forEach(el => el.classList.remove('active'));
  document.getElementById('tab-' + mode).classList.add('active');
  document.getElementById('inputArea').value = '';
  document.getElementById('final').value = '';
  document.getElementById('review').innerText = '';
}

// コピー不可制御
document.getElementById('review').addEventListener('copy', e => e.preventDefault());

function runLLM() {
  const input = document.getElementById('inputArea').value;
  if (!input.trim()) { alert('入力してください'); return; }

  // モードごとにプロンプトとmessagesを作成
  let messages;
  if (currentMode === 'jaen') {
    messages = [
      { role: "system", content: "日本語を正確なビジネス英語に翻訳してください。" },
      { role: "user", content: input }
    ];
  } else if (currentMode === 'jajarev') {
    messages = [
      { role: "system", content: "下記日本語文の校閲と改善案を示してください。最終改善案は一文で。" },
      { role: "user", content: input }
    ];
  } else if (currentMode === 'enrev') {
    messages = [
      { role: "system", content: "下記英文の校閲と改善案を示してください。最終改善案は一文で。" },
      { role: "user", content: input }
    ];
  }

  // Cloudflare Worker経由でAPIを叩く（※YOUR_WORKER_URLに変更）
  fetch('https://YOUR_WORKER_URL', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      model: "llama4-70b-chat",
      messages: messages,
      temperature: 0.4,
      max_tokens: 800
    })
  })
  .then(res => res.json())
  .then(data => {
    // 一発回答型の場合
    if (currentMode === 'jaen') {
      document.getElementById('final').value = data.answer;
      document.getElementById('review').innerText = '';
    } else {
      // 校閲の場合は1回のLLMで分割出力（想定：最終案と校閲詳細を両方出すプロンプト）
      // 例: "校閲結果: ... 最終案: ..."
      const answer = data.answer || "";
      const m = answer.match(/校閲結果:([\s\S]+?)最終案:([\s\S]+)/);
      if (m) {
        document.getElementById('review').innerText = m[1].trim();
        document.getElementById('final').value = m[2].trim();
      } else {
        document.getElementById('final').value = answer;
        document.getElementById('review').innerText = '';
      }
    }
  }).catch(e => {
    document.getElementById('final').value = '';
    document.getElementById('review').innerText = 'エラー: ' + e;
  });
}

function resetUI() {
  document.getElementById('inputArea').value = '';
  document.getElementById('final').value = '';
  document.getElementById('review').innerText = '';
}
</script>
</body>
</html>
```

---

## 【モードごとの実行例イメージ】

### 1. 日本語→英語モード

* 入力：
  　「次回の会議は5月22日に開催します。」
* 最終結果：
  　"The next meeting will be held on May 22."
* 校閲結果欄：
  　（空欄）

### 2. 日本語校閲モード

* 入力：
  　「資料を送信致します。ご確認お願い致します。」
* 校閲結果：
  　「『致します』が重複しています。『送付します』に言い換えるとより自然です。」
* 最終結果：
  　「資料を送付します。ご確認をお願いします。」

### 3. 英語校閲モード

* 入力：
  　"I will send the materials. Please check it."
* 校閲結果：
  　"‘Please check it’ is vague. Consider specifying what should be checked."
* 最終結果：
  　"I will send the materials. Please review them."

---

## 【ポイント】

* 校閲系は「校閲結果＋最終案」を返すプロンプトでLLMに指示
* コピー可不可は`textarea`（可）、`div.nocopy`（不可）で制御
* 実装を2回APIに分けることも可能ですが、1回に集約もOK
* 初期化は内容全消し

---

**ご希望の仕様や実行イメージがもっと具体的にあればカスタマイズします。**
「よりリッチなUI」「校閲詳細をもっと分けて出したい」など、遠慮なくどうぞ！


了解です！
**英語校閲モード**のとき、「校閲結果」は**日本語で解説**し、「最終案」は改善済みの英語で返す…という形ですね。

---

## 【修正版：英語校閲モードのプロンプト例】

```js
else if (currentMode === 'enrev') {
  messages = [
    {
      role: "system",
      content: "下記の英文を校閲してください。まず、どこが改善点かを日本語で簡潔に解説し、最後に改善済みの英語文を一文として示してください。出力例: 校閲結果:（日本語の解説）最終案:（改善英語文）"
    },
    { role: "user", content: input }
  ];
}
```

---

## 【プロンプト例の出力イメージ】

* **入力**:
  `I will send the materials. Please check it.`

* **校閲結果（日本語解説）**:
  `校閲結果: "Please check it" では何を確認するかが曖昧です。"Please review them" のように具体的にしましょう。`

* **最終案（英語文）**:
  `最終案: I will send the materials. Please review them.`

---

## 【全文の一部抜粋・追加修正例】

```js
else if (currentMode === 'enrev') {
  messages = [
    {
      role: "system",
      content: "次の英文を校閲してください。まず、どこが直すべき点かを日本語で簡潔に解説し、最後に改善済みの英文を一文で提示してください。出力は、必ず「校閲結果:」から始め、その後「最終案:」で続けてください。"
    },
    { role: "user", content: input }
  ];
}
```

---

## 【JS側はそのままでOK】

* 校閲結果部分は `div.nocopy` で日本語で表示
* 最終案は `textarea` でコピー可
* 実行部分や分割ロジックもそのまま利用できます

---

### **ご希望の出力フォーマットや細かい指示がさらにあればご相談ください！**

必要に応じてプロンプト文やJS部分の全文も再度提示できます。
